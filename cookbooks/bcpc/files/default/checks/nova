#!/usr/bin/env python

import syslog
import socket
import time
import novaclient
from novaclient.v2 import client



class TestNovaCompute(object):
    def __init__(self, config):
        self.start = time.time()
        self.config = config

        self.client  = client.Client(config["user"], config["password"],
                                     config["tenant"], config["auth_url"],
                                     service_type="compute", insecure=True)


        self.instance_name = "test2-" + socket.gethostname()
        if "timeout" not in self.config:
            self.config["timeout" ] = 60.0

    def _wait_for_statechange(self, server, target):
        while time.time() - self.start < self.config["timeout"]:
            server.get()
            if str(server.status) == target:
                return True
            time.sleep(2)
        return False

    #
    # Associate floating IP
    #
    def _associate_floating_ip(self, server):
        while time.time() - self.start < self.config["timeout"]:
            f = self._get_floating_ip()
            try:
                self.client.servers.add_floating_ip(server, f.ip)
            except novaclient.exceptions.BadRequest as e:
                # Log to track if race condition is fixed per PR #801
                syslog.syslog(syslog.LOG_INFO, str(e) + '. Wait for a bit before retrying...')
                time.sleep(2)
            except novaclient.exceptions.NotFound as e:
                raise Exception("Unable to associate floating IP")
            else:
                return True
        return False

    def _get_floating_ip(self):
        floating_ips = self.client.floating_ips.list()

        # Select first available floating IP
        for f in floating_ips:
            if f.instance_id is None and f.fixed_ip is None:
                return f

        try:
            f = self.client.floating_ips.create(pool=self.config["cluster"])
        except novaclient.exceptions.NotFound:
            raise Exception("No available floating IP")

        return f


    def _delete_server(self, server):
        try:
            server.delete()
        except novaclient.exceptions.NotFound:
            raise Exception("unable to delete server")
        return

    def run(self):
        import glob
        #
        # clean up last (failed?) test
        #
        for server in self.client.servers.list():
            if server.name == self.instance_name:
                self._delete_server(server)

        image_name = self.config.get("image_name", "Cirros 0.3.4*")
        images = [ i for i in self.client.images.list() if i.name is not None and glob.fnmatch.fnmatch(i.name, image_name) ]
        if len(images)==0:
            raise Exception("Found %d images called %s"  %(len(images), image_name))

        flavor_name =  self.config.get("flavor", "generic1.small")
        flavors = [ f for f in self.client.flavors.list() if f.name ==  flavor_name]

        if len(flavors)!=1:
            raise Exception("Found %d flavors called %s"  %(len(flavors), flavor_name))

        #
        # Make the server
        #
        if 'host' in self.config:
            availability_zone = self.config["cluster"] + ':' + self.config["host"]
            server = self.client.servers.create(self.instance_name,
                                                images[0],
                                                flavors[0],
                                                availability_zone=availability_zone,
                                               )
        else:
            server = self.client.servers.create(self.instance_name,
                                                images[0],
                                                flavors[0]
                                               )

        if self._wait_for_statechange(server, "ACTIVE"):
            self._associate_floating_ip(server)
        else:
            return False, "unable to create instance"

        #
        # Kill the server
        #
        self._delete_server(server)

        return True, ""


if __name__ == '__main__':
    import yaml
    import sys
    config = yaml.load(open(sys.argv[1], "r"))

    rc = {}
    try:
        result, msg = TestNovaCompute(config).run();
        rc["msg"] = msg

        if result:
            rc["result"]= "OKAY"
        else:
            rc["result"] = "FAIL"

    except Exception as e:
        rc["result"] = "ERROR"
        rc["msg"]  = "%s : %s" %(str(type(e)), e.message)

    print yaml.dump(rc)
